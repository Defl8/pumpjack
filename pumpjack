#!/usr/bin/env bash
set -eo pipefail


# No true constants so using read only just to prevent bugs
declare -A game_info
current_date=$(date +"%Y-%m-%d")

### ENDPOINTS ###
schedule_now_endpt="https://api-web.nhle.com/v1/schedule/${current_date}"

arg_passed="${1^^}" # Force uppercase
team_abbrev=""

# Make sure an arg was passed
if [[ $# -ne 1 ]]; then
    echo "Usage: pumpjack <team_name>" 
    echo "Error: not enough arguments supplied" >&2
    exit 1
fi

validate_abbrev:W(){
    if [[ $# -ne 1 ]]; then
        echo "convert_arg_to_abbrev <arg>" 
        return 1
    fi

    local arg="$1"

    if [[ "${#arg}" -lt 3 || "${#arg}" -gt 3 ]]; then
        echo "Error: argument is not the correct length." >&2
        return 1
    fi

    echo "${arg^^}" 
    return 0
}

team_abbrev=$(validate_abbrev:W "$arg_passed")

make_get_request(){
    # Make sure that at least one arg was passed
    if [[  $# -ne 1 ]]; then
        echo "Usage: make_get_request <endpoint>"
        return 1
    fi

    local endpt="$1"
    local resp

    if ! resp=$(curl -fsSX GET $endpt); then
        echo "Error: GET request to $endpt failed." >&2 # Pushes to stderr
        return 1
    fi

    echo "$resp"
}

get_games_today(){
    #local schedule_now_data=$(curl -sX GET $schedule_now_endpt)
    local schedule_now_data=$(make_get_request "$schedule_now_endpt")
    local game_week=$(echo $schedule_now_data | jq -c '.gameWeek[]')
    # Not using quotes with the echo flattens the json causing issues...
    echo "$game_week" | while read -r day; do
        local date=$(echo "$day" | jq -r '.date')
        if [[ "$date" == "$current_date" ]]; then
            local games=$(echo "$day" | jq -c '.games[]')
            echo "$games"
        fi
    done
}

games_today=$(get_games_today)
get_game_info(){
    local game="$1"
    if [[  $# -ne 1 ]]; then
        echo "Usage: get_game_info <game>"
        return 1
    fi

    local id=$(echo "$game" | jq -r '.id')
    game_info["id"]="$id"

    local away_team=$(echo "$game" | jq -r '.awayTeam.abbrev')
    local away_score=$(echo "$game" | jq -r '.awayTeam.score')
    game_info["away_team"]="$away_team"
    game_info["away_score"]="$away_score"

    local home_team=$(echo "$game" | jq -r '.homeTeam.abbrev')
    local home_score=$(echo "$game" | jq -r '.homeTeam.score')
    game_info["home_team"]="$home_team"
    game_info["home_score"]="$home_score"

    local game_state=$(echo "$game" | jq -r '.gameState')
    game_info["game_state"]="$game_state"

    local time_remaining=$(echo "$game" | jq -r '.clock.timeRemaining')
    game_info["time_remaining"]="$time_remaining"

    local period_num=$(echo "$game" | jq -r '.periodDescriptor.number')
    local num_denom="nd"
    local period="${period}${period_num}"

    if (( period_num == 3)); then
        period="${period}rd"
    elif (( period_num == 4)); then
        period="OT"
    fi
    game_info["period"]="$period"

    local game_time_utc=$(echo "$game" | jq -r '.startTimeUTC')
    game_info["game_time_utc"]="$game_time_utc"
    return 0
}

utc_to_local(){
    local time_to_convert="$1"
    local format="$2"
    if [[  $# -ne 2 ]]; then
        echo "Usage: utc_to_local <time_to_convert> <format>"
        return 1
    fi
    local time_local=$(date -d "$time_to_convert" +"$format")
    echo "$time_local"
    return 0
}

check_if_playing_today(){
    local games_today="$1"
    while read -r game; do
        get_game_info "$game"
        if [[ "${game_info["home_team"]}" == "$team_abbrev" || "${game_info["away_team"]}" == "$team_abbrev" ]]; then
            game_id="${game_info["id"]}"
            return 0 # Game is being played today
        fi
    return 1 # Game is not being played today
    done <<< "$games_today" 
    # while read runs in subshell, this triple arrow is a here string that keeps
    # the loop in the same shell so that I can use the return value
}

check_if_game_live(){
    local game_id="$1"
    local boxscore_endpt="https://api-web.nhle.com/v1/gamecenter/${game_id}/boxscore"
    local game=$(make_get_request "$boxscore_endpt")
    get_game_info "$game"
    # "FUT" means future
    if [[ "${game_info["game_state"]}" == "OFF" || "${game_info["game_state"]}" == "FUT" ]]; then
        return 1
    fi
    return 0
}

format_live(){
    if [[ $# -ne 1 ]]; then
        echo "Usage: format_live <game_id>"
        return 1
    fi
    local game_id="$1"
    local boxscore_endpt="https://api-web.nhle.com/v1/gamecenter/${game_id}/boxscore"
    local game=$(make_get_request "$boxscore_endpt")

    get_game_info "$game"
    if [[ "${game_info["game_state"]}" != "FINAL" ]]; then
        echo "${game_info["away_team"]} ${game_info["away_score"]} - ${game_info["period"]} ${game_info["time_remaining"]} - ${game_info["home_score"]} ${game_info["home_team"]}"
        return 0
    else
        if [[ "${game_info["period"]}" != "OT" ]]; then
            echo "${game_info["away_team"]} ${game_info["away_score"]} - FINAL - ${game_info["home_score"]} ${game_info["home_team"]}"
            return 0
        else
            echo "${game_info["away_team"]} ${game_info["away_score"]} - FINAL/OT - ${game_info["home_score"]} ${game_info["home_team"]}"
            return 0
        fi
    fi
}

format_later_today(){
    if [[ $# -ne 1 ]]; then
        echo "Usage: format_later_today <game_id>"
        return 1
    fi
    local game_id="$1"
    local boxscore_endpt="https://api-web.nhle.com/v1/gamecenter/${game_id}/boxscore"
    local game=$(make_get_request "$boxscore_endpt")
    get_game_info "$game"
    local game_time_local=$(utc_to_local "${game_info["game_time_utc"]}" "Today @ %H:%M")

    echo "${game_time_local} | ${game_info["away_team"]} @ ${game_info["home_team"]}"
}

get_next_game(){
    local schedule_week_endpt="https://api-web.nhle.com/v1/club-schedule/${team_abbrev}/week/${current_date}" 
    #local week_info=$(curl -sX GET "$schedule_week_endpt")
    local week_info=$(make_get_request "$schedule_week_endpt")

    # The first element in the list of games for the week is always the one
    # closest to the current date
    local next_game=$(echo "$week_info" | jq -c '.games[0]')
    echo "$next_game"
    return 0
}

format_next_game(){
    local next_game="$1"
    get_game_info "$next_game"
    local game_time_local=$(utc_to_local "${game_info["game_time_utc"]}" "%a @ %H:%M")
    if [[ -z "$next_game" ]]; then
        echo "No games scheduled"
        return 0
    else
        echo "$game_time_local | ${game_info[away_team]} @ ${game_info[home_team]}"
        return 0
    fi
}

game_id=0 # When the game is found the id for easy lookup is stored here


if check_if_playing_today "$games_today"; then
    if check_if_game_live "$game_id"; then
        live_output=$(format_live "$game_id")
        echo "$live_output"
    else
        later_today_output=$(format_later_today "$game_id")
        echo "$later_today_output"
    fi
else
    next_game=$(get_next_game)
    next_game_output=$(format_next_game "$next_game")
    echo "$next_game_output"
fi
